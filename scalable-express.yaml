AWSTemplateFormatVersion: '2010-09-09'
Description: Scalable Express app on EC2 with ALB + ASG (private instances, public ALB)

Parameters:
  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
  VpcCidr: { Type: String, Default: 10.0.0.0/16 }
  PublicSubnet1Cidr: { Type: String, Default: 10.0.0.0/24 }
  PublicSubnet2Cidr: { Type: String, Default: 10.0.1.0/24 }
  PrivateSubnet1Cidr: { Type: String, Default: 10.0.10.0/24 }
  PrivateSubnet2Cidr: { Type: String, Default: 10.0.11.0/24 }
  InstanceType: { Type: String, Default: t3.micro }
  AppPort: { Type: Number, Default: 3000 }
  DesiredCapacity: { Type: Number, Default: 1 }
  MaxSize: { Type: Number, Default: 4 }
  CpuTarget: { Type: Number, Default: 50 } # target tracking CPU %

Mappings:
  RegionMap:
    ap-south-1:
      AZ1: ap-south-1a
      AZ2: ap-south-1b

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{Key: Name, Value: express-vpc}]
  
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{Key: Name, Value: express-igw}]

  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      Tags: [{Key: Name, Value: public-a}]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      Tags: [{Key: Name, Value: public-b}]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      Tags: [{Key: Name, Value: private-a}]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      Tags: [{Key: Name, Value: private-b}]

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  AssocPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  EIPNat:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNat.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: [{Key: Name, Value: natgw-a}]

  PrivateRTA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRTA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRTB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  AssocPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRTA
      SubnetId: !Ref PrivateSubnet1

  AssocPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRTB
      SubnetId: !Ref PrivateSubnet2

  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref AlbSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref AlbSG]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: !Ref AppPort
      TargetType: instance
      HealthCheckPath: /health
      Matcher: { HttpCode: '200' }

  ListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref InstanceRole]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile: { Arn: !GetAtt InstanceProfile.Arn }
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups: [!Ref AppSG]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -euxo pipefail
            dnf -y update
            dnf -y install curl tar gzip
            # Install Node via nvm (stable)
            export NVM_DIR=/usr/local/nvm
            mkdir -p $NVM_DIR
            curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            source $NVM_DIR/nvm.sh
            nvm install --lts
            ln -s $(which node) /usr/local/bin/node || true
            ln -s $(which npm) /usr/local/bin/npm || true
            npm install -g pm2
            # App dir
            mkdir -p /opt/app
            cat >/opt/app/server.js <<'EOF'
            const express = require('express');
            const app = express();
            app.get('/health', (_, res) => res.status(200).send('OK'));
            app.get('/', (_, res) => res.send('Hello from Express ASG!'));
            app.listen(${AppPort}, () => console.log('Server on ${AppPort}'));
            EOF
            cd /opt/app
            npm init -y
            npm install express
            pm2 start server.js --name app -f
            pm2 startup systemd -u root --hp /root
            pm2 save
            systemctl enable pm2-root
            # Open firewall not needed; SG controls traffic.

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      TargetGroupARNs: [!Ref TargetGroup]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      DefaultInstanceWarmup: 120
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

  CpuTargetTracking:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CpuTarget

Outputs:
  AlbDNS:
    Description: Public URL to test
    Value: !GetAtt ALB.DNSName