AWSTemplateFormatVersion: '2010-09-09'
Description: Scalable Express app on EC2 with ALB + ASG (private instances, public ALB) + lifecycle hook + cfn-signal + CloudWatch logs + VPC Flow Logs

Parameters:
  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
  VpcCidr: { Type: String, Default: 10.0.0.0/16 }
  PublicSubnet1Cidr: { Type: String, Default: 10.0.0.0/24 }
  PublicSubnet2Cidr: { Type: String, Default: 10.0.1.0/24 }
  PrivateSubnet1Cidr: { Type: String, Default: 10.0.10.0/24 }
  PrivateSubnet2Cidr: { Type: String, Default: 10.0.11.0/24 }
  InstanceType: { Type: String, Default: t3.micro }
  AppPort: { Type: Number, Default: 3000 }
  DesiredCapacity: { Type: Number, Default: 1 }
  MaxSize: { Type: Number, Default: 4 }
  CpuTarget: { Type: Number, Default: 50 } # target tracking CPU %

Resources:
  # --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: express-vpc }]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: express-igw }]

  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: public-a }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: public-b }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: private-a }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: private-b }]

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  AssocPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  EIPNat:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNat.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: [{ Key: Name, Value: natgw-a }]

  PrivateRTA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRTA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRTB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  AssocPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRTA
      SubnetId: !Ref PrivateSubnet1

  AssocPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRTB
      SubnetId: !Ref PrivateSubnet2

  # --- Security Groups ---
  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref AlbSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # --- Load Balancer ---
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref AlbSG]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: !Ref AppPort
      TargetType: instance
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher: { HttpCode: '200-399' }
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  ListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # --- Instance IAM ---
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: express-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: AllowCfnSignal
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                  - cloudformation:DescribeStackResource
                Resource: "*"
        - PolicyName: AllowLifecycleComplete
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - autoscaling:RecordLifecycleActionHeartbeat
                  - autoscaling:DescribeAutoScalingInstances
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref InstanceRole]

  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /express/asg
      RetentionInDays: 7

  # --- Launch Template (UserData installs Node, runs app, signals ready, completes lifecycle) ---
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile: { Arn: !GetAtt InstanceProfile.Arn }
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            Groups: [!Ref AppSG]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > /var/log/user-data.log 2>&1
            set -euxo pipefail

            # --- Install CFN helper scripts (for cfn-signal) ---
            dnf -y update
            dnf -y install python3-pip awscli
            pip3 install --upgrade 'https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz'

            # Always signal success/failure on exit (CloudFormation CreationPolicy)
            trap 'RC=$?; /usr/local/bin/cfn-signal --stack ${AWS::StackName} --resource ASG --region ${AWS::Region} --exit-code $RC; exit $RC' EXIT

            # --- App runtime: Node.js, npm, pm2 (from AL2023 repos) ---
            dnf -y install nodejs npm
            npm install -g pm2

            # --- App code (sample Express; replace with your artifact if needed) ---
            mkdir -p /opt/app
            cd /opt/app
            cat > server.js <<'EOF'
            const express = require('express');
            const app = express();
            const PORT = ${AppPort};
            app.get('/health', (_, res) => res.status(200).send('OK'));
            app.get('/',      (_, res) => res.send('Hello from Express ASG!'));
            app.listen(PORT, '0.0.0.0', () => console.log('Server on ' + PORT));
            EOF

            npm init -y
            npm install express
            pm2 start server.js --name app -f
            pm2 startup systemd -u root --hp /root
            pm2 save
            systemctl enable pm2-root

            # --- Readiness: ensure /health returns 200 before continuing ---
            for i in {1..40}; do curl -sf http://127.0.0.1:${AppPort}/health && break || sleep 3; done
            curl -sf http://127.0.0.1:${AppPort}/health

            # --- Complete ASG launch lifecycle hook (let instance enter InService/register) ---
            IID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            ASG_NAME=$(aws autoscaling describe-auto-scaling-instances \
              --instance-ids "$IID" \
              --query 'AutoScalingInstances[0].AutoScalingGroupName' \
              --output text --region ${AWS::Region})
            aws autoscaling complete-lifecycle-action \
              --lifecycle-action-result CONTINUE \
              --instance-id "$IID" \
              --auto-scaling-group-name "$ASG_NAME" \
              --lifecycle-hook-name launch-wait-hook \
              --region ${AWS::Region} || true

            # --- CloudWatch Agent: ship cloud-init & pm2 logs ---
            dnf -y install amazon-cloudwatch-agent || true
            mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
            cat >/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<'JSON'
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      { "file_path": "/var/log/cloud-init-output.log",
                        "log_group_name": "/express/asg",
                        "log_stream_name": "{instance_id}/cloud-init",
                        "timestamp_format": "%b %d %H:%M:%S" },
                      { "file_path": "/var/log/user-data.log",
                        "log_group_name": "/express/asg",
                        "log_stream_name": "{instance_id}/user-data" },
                      { "file_path": "/root/.pm2/logs/*.log",
                        "log_group_name": "/express/asg",
                        "log_stream_name": "{instance_id}/pm2" }
                    ]
                  }
                }
              }
            }
            JSON
            systemctl enable amazon-cloudwatch-agent || true
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config -m ec2 \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s || true

  # --- Auto Scaling Group (+ CreationPolicy waits for cfn-signal) ---
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - PrivateRouteA
      - PrivateRouteB
      - AssocPrivate1
      - AssocPrivate2
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_marker:
              command: "echo 'cfn-init ran' > /var/log/cfn-init.marker"
    Properties:
      VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      TargetGroupARNs: [!Ref TargetGroup]
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      DefaultInstanceWarmup: 120
    # CreationPolicy:
    #   ResourceSignal:
    #     Count: 1
    #     Timeout: PT20M

  # Pause instances on launch until the app is ready; instance completes this in UserData.
  LaunchWaitHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref ASG
      LifecycleHookName: launch-wait-hook
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      HeartbeatTimeout: 900
      DefaultResult: ABANDON

  CpuTargetTracking:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CpuTarget

  # --- VPC Flow Logs to CloudWatch (helps debug) ---
  CWFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /vpc/flowlogs
      RetentionInDays: 7

  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: vpc-flowlogs-to-cw
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: vpc-flow-logs.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: allow-write-to-cw-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/vpc/flowlogs:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: "*"

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      MaxAggregationInterval: 60
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CWFlowLogGroup
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      LogFormat: >-
        ${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr}
        ${srcport} ${dstport} ${protocol} ${packets} ${bytes}
        ${action} ${log-status} ${vpc-id} ${subnet-id} ${instance-id}
        ${tcp-flags} ${flow-direction}

Outputs:
  AlbDNS:
    Description: Public URL to test
    Value: !GetAtt ALB.DNSName
